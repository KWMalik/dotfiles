commit 40ec0756407b4b400b0cecc8510e818c4590c9bc
Author: Jeffrey Tratner <jeffrey.tratner@gmail.com>
Date:   Fri May 4 01:07:23 2012 +0000

    detailed README and SETUP guides, rm-dotsymlinks script
    
    rm-dotsymlinks: script to remove dotfile symlinks from a target directory
    
    to use: ``./rm-symlinks $HOME``
    
    converted README to rst and added detailed guide, vimrc fixes, SETUP files
    
    created SETUP_Debian.rst (and its symlink SETUP_Ubuntu) explaining how to
    handle some of the setup on Ubuntu/Debian (including selecting default editor, etc
    
    created README in bundle to describe how to use the bundle and vim folders
    
    (deleted old readme.md)

diff --git a/README.md b/README.md
deleted file mode 100644
index afff13b..0000000
--- a/README.md
+++ /dev/null
@@ -1,817 +0,0 @@
-dotfiles
-========
-
-From their start standing on the shoulders of dotfile giants like sontek,
-jtratner&#39;s dotfiles have begun to slowly evolve in their own right.
-<<<<<<< HEAD
-<<<<<<< HEAD
-=======
-=======
-
-Using these dotfiles
-====================
-
-## tl;dr
-
-    git clone https://github.com/jtratner/dotfiles.git dotfiles
-    cd dotfiles
-    ./install.sh
-    cd _vim
-    ./symlinkdirectory bundle-available bundle
-
-My setup is different than that of sontek and others, because I like to be able
-to individually control bundles on each machine, so I use symlinks to each
-directory. Plus, if you need to remove a bundle, you don't have to go through
-the annoying hassle of removing it from your gitmodules first. But you should do
-what works for you.
-
-## Using the dotfiles
-
-* Pathogen reads from `_vim/bundle`, so any bundles you want to use should be
-  symlinked into there (you can use the `symlinkdirectory` script to do that)
-* You need `rope`, `ack`, `nose` and `ipython` to use all of the features in the
-  bundle.
-* Run `install.sh` to set up the dotfiles. It auto backs up your existing
-  dotfiles to .bak. (if you want to remove the new files, you can do so either
-  by using `rm -i *` and only accepting symlinks or by using the `rm_symlink`
-  function from my package [`simpleutils`][su] (vaguely shameless plug!)
-
-## New commands, bundles and additional reading
-
-The `_vimrc` file is pretty well documented too. You should also go read
-[sontek's description of his dotfiles][SDot] for more in-depth info on many of
-these plugins.  I'm just going to mention the changes I've made since
-'forking'(ish) sontek's dotfiles.
-
-[SDot]: http://sontek.net/turning-vim-into-a-modern-python-ide
-
-### New bundles
-
-<<<<<<< HEAD
-<<<<<<< HEAD
-1. _Additional Bundles_
-** _vim-ipython_ - **hands down the best tool to help you code in python** lets
-you connect to ipython, which is a fabulous suite for
-** _tComment_ - handy for easily commenting/uncommenting sections
->>>>>>> 8b3c5c1... adding guide to README
-
-<<<<<<< HEAD
-Using these dotfiles
-====================
-
-## tl;dr
-
-    git clone https://github.com/jtratner/dotfiles.git dotfiles
-    cd dotfiles
-    ./install.sh
-    cd _vim
-    ./symlinkdirectory bundle-available bundle
-
-My setup is different than that of sontek and others, because I like to be able
-to individually control bundles on each machine, so I use symlinks to each
-directory. Plus, if you need to remove a bundle, you don't have to go through
-the annoying hassle of removing it from your gitmodules first. But you should do
-what works for you.
-
-## Using the dotfiles
-
-* Pathogen reads from `_vim/bundle`, so any bundles you want to use should be
-  symlinked into there (you can use the `symlinkdirectory` script to do that)
-* You need `rope`, `ack`, `nose` and `ipython` to use all of the features in the
-  bundle.
-* Run `install.sh` to set up the dotfiles. It auto backs up your existing
-  dotfiles to .bak. (if you want to remove the new files, you can do so either
-  by using `rm -i *` and only accepting symlinks or by using the `rm_symlink`
-  function from my package [`simpleutils`][su] (vaguely shameless plug!)
-
-## New commands, bundles and additional reading
-
-The `_vimrc` file is pretty well documented too. You should also go read
-[sontek's description of his dotfiles][SDot] for more in-depth info on many of
-these plugins.  I'm just going to mention the changes I've made since
-'forking'(ish) sontek's dotfiles.
-
-[SDot]: http://sontek.net/turning-vim-into-a-modern-python-ide
-
-### New bundles
-
-<<<<<<< HEAD
-<<<<<<< HEAD
-1. _Additional Bundles_
-** _vim-ipython_ - **hands down the best tool to help you code in python** lets
-you connect to ipython, which is a fabulous suite for
-** _tComment_ - handy for easily commenting/uncommenting sections
->>>>>>> 8b3c5c1... adding guide to README
-
-<<<<<<< HEAD
-Using these dotfiles
-====================
-
-## tl;dr
-
-    git clone https://github.com/jtratner/dotfiles.git dotfiles
-    cd dotfiles
-    ./install.sh
-    cd _vim
-    ./symlinkdirectory bundle-available bundle
-
-My setup is different than that of sontek and others, because I like to be able
-to individually control bundles on each machine, so I use symlinks to each
-directory. Plus, if you need to remove a bundle, you don't have to go through
-the annoying hassle of removing it from your gitmodules first. But you should do
-what works for you.
-
-## Using the dotfiles
-
-* Pathogen reads from `_vim/bundle`, so any bundles you want to use should be
-  symlinked into there (you can use the `symlinkdirectory` script to do that)
-* You need `rope`, `ack`, `nose` and `ipython` to use all of the features in the
-  bundle.
-* Run `install.sh` to set up the dotfiles. It auto backs up your existing
-  dotfiles to .bak. (if you want to remove the new files, you can do so either
-  by using `rm -i *` and only accepting symlinks or by using the `rm_symlink`
-  function from my package [`simpleutils`][su] (vaguely shameless plug!)
-
-## New commands, bundles and additional reading
-
-The `_vimrc` file is pretty well documented too. You should also go read
-[sontek's description of his dotfiles][SDot] for more in-depth info on many of
-these plugins.  I'm just going to mention the changes I've made since
-'forking'(ish) sontek's dotfiles.
-
-[SDot]: http://sontek.net/turning-vim-into-a-modern-python-ide
-
-### New bundles
-
-=======
-### New Bundles
->>>>>>> d6b8234... updated readme, created scripts folder
-=======
->>>>>>> f0915be... updated readme, cosmetic changes to vimrc
-=======
-### New Bundles
->>>>>>> d6b8234... updated readme, created scripts folder
-=======
->>>>>>> f0915be... updated readme, cosmetic changes to vimrc
-* _vim-ipython_ - **hands down the best tool to help you code in python** lets
-  you connect to ipython, which is a fabulous suite for
-* _VOom_ - simple but very useful vim application. Creates a two-pane outline
-  window that allows you to browse the structure of your files (or
-  classes/functions in python ,etc). For example if you run `:Voom` on this
-<<<<<<< HEAD
-<<<<<<< HEAD
-<<<<<<< HEAD
-<<<<<<< HEAD
-  file, you'll see a neat directory tree that you can use to navigate the file.
-  Also has a useful in-file grep.
-* _tComment_ - handy for easily commenting/uncommenting sections
-* _snipmate_ - (updated to garbas' new version + added the snippet repository)
-* _Powerline_ - better vim status bar. NOTE: You have to install a patched font
-  to use it. Luckily, there are some included in \_fonts that'll be installed
-  automatically. Yay!
-
-[su]: https://github.com/jtratner/simpleutils
-
-### New commands
-
-* _autolinebreaking for comments/plaintext_ (textwrapping and autolinebreak)
-** `<leader>en`[^en]\(tw=80), `<leader>ec`[^ec]\(tw=72) `<leader>ed`[^ed]\(tw=0, no autowrap)
-* _VOom on <C-F3>_ (and toggle `Voom` with `<F3>`)
-* _:EqualLine_ put an equals line just as long as current line of text
-  (from a great post on [Stack Overflow][SO])
-
-[^en]: 'Edit Normal'
-[^ec]: 'Edit Comment'
-[^ed]: 'Edit Done'
-
-
-Setting up dotfiles, vim and IPython
-====================================
-
-## Getting Vim
-
-### Compiling Vim (Medium!)
-
-0. Handling dependencies - there are a ton and, unfortunately, vim doesn't
-   always tell you that you've managed to get all the ones you want. I used to
-   have an install script[^1], but it really varies a ton by platform.
-** _Ubuntu (and Linux generally)_ : there's a raft of libraries, but the most
-important to grab are: `xorg-dev python-dev ruby ruby-dev` as well as a raft of
-ncurses libraries. Easier way: `sudo apt-get build-dep vim-gnome` (if you're
-using unity)
-** _Mac_ : I think you can get MacVim which should have everything
-** _Windows_ : The \_vim files will be helpful, but note that it has to be under
-`vimfiles`, not `.vim`
-
-1. The easiest way to setup vim _and be sure that you have the features you
-   want_ is to grab the tarball from the vim homepage, and configure it with:[^2]
-
-    ./configure --enable-pythoninterp --enable-rubyinterp --enable-gui --with-features=huge --prefix=$HOME/path/to/directory `
-
-2. Go to your directory where you installed vim and check that you got the right
-   version with:
-
-   ./vim --version
-
-3. If you did it correctly, you'll get a huge amount of input with `+` and `-`.
-   Most important thing is to check that you had the following:
-** `+python`
-** `+ruby` (if you want Command-T)
-** `+xterm-clipboard` (if on Linux w/ X11) or another `+clipboard` entry -- you
-need this to be able to copy/paste from the clipboard.
-
-## Using the dotfiles
-
-### Option 1: Clone the dotfiles
-
-0. Install git. (e.g. `sudo apt-get install git`)
-
-1. Pick a directory, then clone these dotfiles with (it'll automatically add it
-   to a folder called 'dotfiles' unless you specify a different folder after the
-   clone e.g. `git clone https://github.com/jtratner/dotfiles.git
-   mydotfilecollection/jtratner`):
-
-    git clone https://github.com/jtratner/dotfiles.git
-
-### Option 2: Fork the dotfiles yourself
-
-0. Get an account on github, follow their instructions and come back after a
-   bit. Fork the dotfiles yourself. (click on the fork button ;))
-
-1. Initiate a git repository, then add your fork of dotfiles on github as a
-   remote. Finally, download your files.
-
-   mkdir dotfiles
-   cd dotfiles
-   git init
-   git remote add origin git@github.com:_username_/_yourrepository_.git
-   git pull origin master
-
-### Install the dotfiles
-
-2. Go into the dotfiles directory, run `./install.sh` in the command line. BOOM!
-   You are halfway done.
-
-### Symlink the bundle(s) you want to use
-
-3. Change into the \_vim subfolder (`cd _vim`)
-
-4. To activate all the bundles in a folder, you can run the `symlinkdirectory`
-   script.[^5]
-
-   ./symlinkdirectory bundle-available bundle
-
-5. That script created symlinks in the bundle folder to all the plugins in
-   bundle-available. To choose just the plugins you want, add or delete some or
-   use `ln -s` to create new ones[^5]. Bundle-disabled and testing contain
-   additional plugins that you might try out. Or add your own!
-
-## Install rope, nose and ack (optional virtualenv)
-
-0. Rope and nose you can get through `easy_install` or `pip` (I prefer pip)
-
-    pip install rope nose
-
-1. Ack you have to get as a package (e.g. `apt-get install ack` or through
-   homebrew)
-
-2. `virtualenv` - highly useful, you probably want it. (I list it last because
-   the previous items need to be installed system-wide)
-
-    pip install virtualenv virtualenvwrapper
-    virtualenvwrapper.sh
-
-### You have a working setup!
-
-Now you should be able to just run your file and have everything work. Whee!
-
-## IPython
-
-### Installing IPython (+ dependencies)
-
-_Preface_ This ought to work:
-
-    easy_install ipython[zmq,qtconsole,notebook,test]
-
-It never works for me. You _can_ install IPython with `pip`/`easy_install`, you
-just have to get the dependencies first. Before you do, you might also check out
-the [IPython website][IP] and its [guide to installation][IPinstall]
-
-0. Getting python dependencies (you may already have some or all of these) Note
-   that matplotlib, scipy, and numpy are only required if you want to run pylab;
-   however I highly suggest that you get them because they are very useful and
-   pretty darn cool:
-
-    pip install nose tornado pygments pyzmq pexpect distribute matplotlib scipy numpy
-
-1. _Getting Qt._ This can be more or less of an ordeal, depending on your system.
-   Do yourself a favor: _try to find a precompiled binary first_ it will be far
-   easier. Seriously. Otherwise, you'll probably need to get `SIP`, `PyQt` and
-   `Qt` online. (TODO: write instructions for this. For now, Google search is
-   your friend.)
-
-2. _Install IPython_ Okay, actually this is pretty easy now! Yay!
-
-    pip install ipython
-
-3. _Check that it's working_ Run IPython's testing suite. Read the output to
-   make sure you aren't missing any libraries.
-
-    iptest
-
-4. _If it fails_,
-    1. It's okay. Happened to me too.
-    2. Read the output of iptest, see if it gives any info. (google is your
-       friend).
-    3. Check that you have all the dependencies.
-    4. Try uninstalling and reinstalling IPython.
-    5. If it's not fixed by now, try Google, [Stack Overflow][SO] or the [IPython website][IP].
-
-[IP]: http://www.ipython.org
-[IPinstall]: http://ipython.org/ipython-doc/stable/install/install.html
-[SO]: http://www.stackoverflow.com
-
-[^1]: Email me if you'd like a copy
-[^2]: The easiest way is to download and install a precompiled version. On
-Ubuntu, `vim-gnome` has most of what you want.
-[^3]: I set up a different home directory and then symlink it to my local bin,
-that way I can still use the default system editor as needed (say if xwindows
-crashes or something :P)
-[^5]: You can also do this individually with `ln -s`. It's important to use the
-actual paths to the file, or sometimes the links will mess up. For that reason,
-I recommend that, instead of using relative paths, use full paths. E.g. in to
-symlink a file in a subfolder of the \_vim directory: `ln -s $PWD/myfile ../bundle/`
-[^4]: Here's the whole list:
-
-    VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Apr 19 2012 21:01:31)
-    Compiled by root@openwater
-    Huge version with GTK2 GUI.  Features included (+) or not (-):
-    +arabic +autocmd +balloon_eval +browse ++builtin_terms +byte_offset +cindent
-    +clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments
-    +conceal +cryptv +cscope +cursorbind +cursorshape +dialog_con_gui +diff
-    +digraphs +dnd -ebcdic +emacs_tags +eval +ex_extra +extra_search +farsi
-    +file_in_path +find_in_path +float +folding -footer +fork() +gettext
-    -hangul_input +iconv +insert_expand +jumplist +keymap +langmap +libcall
-    +linebreak +lispindent +listcmds +localmap -lua +menu +mksession +modify_fname
-    +mouse +mouseshape +mouse_dec +mouse_gpm -mouse_jsbterm +mouse_netterm
-    -mouse_sysmouse +mouse_xterm +multi_byte +multi_lang -mzscheme +netbeans_intg
-    -osfiletype +path_extra -perl +persistent_undo +postscript +printer +profile
-    +python -python3 +quickfix +reltime +rightleft +ruby +scrollbind +signs
-    +smartindent -sniff +startuptime +statusline -sun_workshop +syntax +tag_binary
-    +tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title
-    +toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo
-    +vreplace +wildignore +wildmenu +windows +writebackup +X11 -xfontset +xim
-    +xsmp_interact +xterm_clipboard -xterm_save
-    system vimrc file: "$VIM/vimrc"
-        user vimrc file: "$HOME/.vimrc"
-        user exrc file: "$HOME/.exrc"
-    system gvimrc file: "$VIM/gvimrc"
-        user gvimrc file: "$HOME/.gvimrc"
-        system menu file: "$VIMRUNTIME/menu.vim"
-    fall-back for $VIM: "/home/jtratner/vimpyru/share/vim"
-    Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/i386-linux-gnu/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/gio-unix-2.0/ -I/usr/include/glib-2.0 -I/usr/lib/i386-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12   -I/usr/local/include  -g -O2 -D_FORTIFY_SOURCE=1     -I/usr/lib/ruby/1.8/i686-linux -DRUBY_VERSION=18
-    Linking: gcc   -L. -Wl,-Bsymbolic-functions -rdynamic -Wl,-export-dynamic  -L/usr/local/lib -o vim   -pthread -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0   -lXt -lncurses -lselinux  -lacl -lgpm -L/usr/lib/python2.7/config -lpython2.7 -lutil -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions   -lruby1.8 -lrt -lm
-=======
-Setup
-=====
-=======
-  file, you'll see a neat directory tree that you can use to navigate.
-=======
-  file, you'll see a neat directory tree that you can use to navigate the file.
-  Also has a useful in-file grep.
->>>>>>> f0915be... updated readme, cosmetic changes to vimrc
-* _tComment_ - handy for easily commenting/uncommenting sections
-* _snipmate_ - (updated to garbas' new version + added the snippet repository)
-* _Powerline_ - better vim status bar. NOTE: You have to install a patched font
-  to use it. Luckily, there are some included in \_fonts that'll be installed
-  automatically. Yay!
-
-[su]: https://github.com/jtratner/simpleutils
-
-### New commands
-
-* _autolinebreaking for comments/plaintext_ (textwrapping and autolinebreak)
-** `<leader>en`[^en]\(tw=80), `<leader>ec`[^ec]\(tw=72) `<leader>ed`[^ed]\(tw=0, no autowrap)
-* _VOom on <C-F3>_ (and toggle `Voom` with `<F3>`)
-* _:EqualLine_ put an equals line just as long as current line of text
-  (from a great post on [Stack Overflow][SO])
-
-[^en]: 'Edit Normal'
-[^ec]: 'Edit Comment'
-[^ed]: 'Edit Done'
-
-
-Setting up dotfiles, vim and IPython
-====================================
->>>>>>> d6b8234... updated readme, created scripts folder
-
-## Getting Vim
-
-### Compiling Vim (Medium!)
-
-0. Handling dependencies - there are a ton and, unfortunately, vim doesn't
-   always tell you that you've managed to get all the ones you want. I used to
-   have an install script[^1], but it really varies a ton by platform.
-** _Ubuntu (and Linux generally)_ : there's a raft of libraries, but the most
-important to grab are: `xorg-dev python-dev ruby ruby-dev` as well as a raft of
-ncurses libraries. Easier way: `sudo apt-get build-dep vim-gnome` (if you're
-using unity)
-** _Mac_ : I think you can get MacVim which should have everything
-** _Windows_ : The \_vim files will be helpful, but note that it has to be under
-`vimfiles`, not `.vim`
-
-1. The easiest way to setup vim _and be sure that you have the features you
-   want_ is to grab the tarball from the vim homepage, and configure it with:[^2]
-
-    ./configure --enable-pythoninterp --enable-rubyinterp --enable-gui --with-features=huge --prefix=$HOME/path/to/directory `
-
-2. Go to your directory where you installed vim and check that you got the right
-   version with:
-
-   ./vim --version
-
-3. If you did it correctly, you'll get a huge amount of input with `+` and `-`.
-   Most important thing is to check that you had the following:
-** `+python`
-** `+ruby` (if you want Command-T)
-** `+xterm-clipboard` (if on Linux w/ X11) or another `+clipboard` entry -- you
-need this to be able to copy/paste from the clipboard.
-
-## Using the dotfiles
-
-### Option 1: Clone the dotfiles
-
-0. Install git. (e.g. `sudo apt-get install git`)
-
-1. Pick a directory, then clone these dotfiles with (it'll automatically add it
-   to a folder called 'dotfiles' unless you specify a different folder after the
-   clone e.g. `git clone https://github.com/jtratner/dotfiles.git
-   mydotfilecollection/jtratner`):
-
-    git clone https://github.com/jtratner/dotfiles.git
-
-### Option 2: Fork the dotfiles yourself
-
-0. Get an account on github, follow their instructions and come back after a
-   bit. Fork the dotfiles yourself. (click on the fork button ;))
-
-1. Initiate a git repository, then add your fork of dotfiles on github as a
-   remote. Finally, download your files.
-
-   mkdir dotfiles
-   cd dotfiles
-   git init
-   git remote add origin git@github.com:_username_/_yourrepository_.git
-   git pull origin master
-
-### Install the dotfiles
-
-2. Go into the dotfiles directory, run `./install.sh` in the command line. BOOM!
-   You are halfway done.
-
-### Symlink the bundle(s) you want to use
-
-3. Change into the \_vim subfolder (`cd _vim`)
-
-4. To activate all the bundles in a folder, you can run the `symlinkdirectory`
-   script.[^5]
-
-   ./symlinkdirectory bundle-available bundle
-
-5. That script created symlinks in the bundle folder to all the plugins in
-   bundle-available. To choose just the plugins you want, add or delete some or
-   use `ln -s` to create new ones[^5]. Bundle-disabled and testing contain
-   additional plugins that you might try out. Or add your own!
-
-## Install rope, nose and ack (optional virtualenv)
-
-0. Rope and nose you can get through `easy_install` or `pip` (I prefer pip)
-
-    pip install rope nose
-
-1. Ack you have to get as a package (e.g. `apt-get install ack` or through
-   homebrew)
-
-2. `virtualenv` - highly useful, you probably want it. (I list it last because
-   the previous items need to be installed system-wide)
-
-    pip install virtualenv virtualenvwrapper
-    virtualenvwrapper.sh
-
-### You have a working setup!
-
-Now you should be able to just run your file and have everything work. Whee!
-
-## IPython
-
-### Installing IPython (+ dependencies)
-
-_Preface_ This ought to work:
-
-    easy_install ipython[zmq,qtconsole,notebook,test]
-
-It never works for me. You _can_ install IPython with `pip`/`easy_install`, you
-just have to get the dependencies first. Before you do, you might also check out
-the [IPython website][IP] and its [guide to installation][IPinstall]
-
-0. Getting python dependencies (you may already have some or all of these) Note
-   that matplotlib, scipy, and numpy are only required if you want to run pylab;
-   however I highly suggest that you get them because they are very useful and
-   pretty darn cool:
-
-    pip install nose tornado pygments pyzmq pexpect distribute matplotlib scipy numpy
-
-1. _Getting Qt._ This can be more or less of an ordeal, depending on your system.
-   Do yourself a favor: _try to find a precompiled binary first_ it will be far
-   easier. Seriously. Otherwise, you'll probably need to get `SIP`, `PyQt` and
-   `Qt` online. (TODO: write instructions for this. For now, Google search is
-   your friend.)
-
-2. _Install IPython_ Okay, actually this is pretty easy now! Yay!
-
-    pip install ipython
-
-3. _Check that it's working_ Run IPython's testing suite. Read the output to
-   make sure you aren't missing any libraries.
-
-    iptest
-
-4. _If it fails_,
-    1. It's okay. Happened to me too.
-    2. Read the output of iptest, see if it gives any info. (google is your
-       friend).
-    3. Check that you have all the dependencies.
-    4. Try uninstalling and reinstalling IPython.
-    5. If it's not fixed by now, try Google, [Stack Overflow][SO] or the [IPython website][IP].
-
-[IP]: http://www.ipython.org
-[IPinstall]: http://ipython.org/ipython-doc/stable/install/install.html
-[SO]: http://www.stackoverflow.com
-
-[^1]: Email me if you'd like a copy
-[^2]: The easiest way is to download and install a precompiled version. On
-Ubuntu, `vim-gnome` has most of what you want.
-[^3]: I set up a different home directory and then symlink it to my local bin,
-that way I can still use the default system editor as needed (say if xwindows
-crashes or something :P)
-[^5]: You can also do this individually with `ln -s`. It's important to use the
-actual paths to the file, or sometimes the links will mess up. For that reason,
-I recommend that, instead of using relative paths, use full paths. E.g. in to
-symlink a file in a subfolder of the \_vim directory: `ln -s $PWD/myfile ../bundle/`
-[^4]: Here's the whole list:
-
-<<<<<<< HEAD
-[1]: there are a ton of dependencies for compiling vim, and they aren't well documented. I used to have an install script but frankly
->>>>>>> 27ba0f9... updating README.md
-=======
-    VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Apr 19 2012 21:01:31)
-    Compiled by root@openwater
-    Huge version with GTK2 GUI.  Features included (+) or not (-):
-    +arabic +autocmd +balloon_eval +browse ++builtin_terms +byte_offset +cindent
-    +clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments
-    +conceal +cryptv +cscope +cursorbind +cursorshape +dialog_con_gui +diff
-    +digraphs +dnd -ebcdic +emacs_tags +eval +ex_extra +extra_search +farsi
-    +file_in_path +find_in_path +float +folding -footer +fork() +gettext
-    -hangul_input +iconv +insert_expand +jumplist +keymap +langmap +libcall
-    +linebreak +lispindent +listcmds +localmap -lua +menu +mksession +modify_fname
-    +mouse +mouseshape +mouse_dec +mouse_gpm -mouse_jsbterm +mouse_netterm
-    -mouse_sysmouse +mouse_xterm +multi_byte +multi_lang -mzscheme +netbeans_intg
-    -osfiletype +path_extra -perl +persistent_undo +postscript +printer +profile
-    +python -python3 +quickfix +reltime +rightleft +ruby +scrollbind +signs
-    +smartindent -sniff +startuptime +statusline -sun_workshop +syntax +tag_binary
-    +tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title
-    +toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo
-    +vreplace +wildignore +wildmenu +windows +writebackup +X11 -xfontset +xim
-    +xsmp_interact +xterm_clipboard -xterm_save
-    system vimrc file: "$VIM/vimrc"
-        user vimrc file: "$HOME/.vimrc"
-        user exrc file: "$HOME/.exrc"
-    system gvimrc file: "$VIM/gvimrc"
-        user gvimrc file: "$HOME/.gvimrc"
-        system menu file: "$VIMRUNTIME/menu.vim"
-    fall-back for $VIM: "/home/jtratner/vimpyru/share/vim"
-    Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/i386-linux-gnu/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/gio-unix-2.0/ -I/usr/include/glib-2.0 -I/usr/lib/i386-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12   -I/usr/local/include  -g -O2 -D_FORTIFY_SOURCE=1     -I/usr/lib/ruby/1.8/i686-linux -DRUBY_VERSION=18
-    Linking: gcc   -L. -Wl,-Bsymbolic-functions -rdynamic -Wl,-export-dynamic  -L/usr/local/lib -o vim   -pthread -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0   -lXt -lncurses -lselinux  -lacl -lgpm -L/usr/lib/python2.7/config -lpython2.7 -lutil -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions   -lruby1.8 -lrt -lm
->>>>>>> 8b3c5c1... adding guide to README
-=======
-Setup
-=====
-=======
-  file, you'll see a neat directory tree that you can use to navigate.
-=======
-  file, you'll see a neat directory tree that you can use to navigate the file.
-  Also has a useful in-file grep.
->>>>>>> f0915be... updated readme, cosmetic changes to vimrc
-* _tComment_ - handy for easily commenting/uncommenting sections
-* _snipmate_ - (updated to garbas' new version + added the snippet repository)
-* _Powerline_ - better vim status bar. NOTE: You have to install a patched font
-  to use it. Luckily, there are some included in \_fonts that'll be installed
-  automatically. Yay!
-
-[su]: https://github.com/jtratner/simpleutils
-
-### New commands
-
-* _autolinebreaking for comments/plaintext_ (textwrapping and autolinebreak)
-** `<leader>en`[^en]\(tw=80), `<leader>ec`[^ec]\(tw=72) `<leader>ed`[^ed]\(tw=0, no autowrap)
-* _VOom on <C-F3>_ (and toggle `Voom` with `<F3>`)
-* _:EqualLine_ put an equals line just as long as current line of text
-  (from a great post on [Stack Overflow][SO])
-
-[^en]: 'Edit Normal'
-[^ec]: 'Edit Comment'
-[^ed]: 'Edit Done'
-
-
-Setting up dotfiles, vim and IPython
-====================================
->>>>>>> d6b8234... updated readme, created scripts folder
-
-## Getting Vim
-
-### Compiling Vim (Medium!)
-
-0. Handling dependencies - there are a ton and, unfortunately, vim doesn't
-   always tell you that you've managed to get all the ones you want. I used to
-   have an install script[^1], but it really varies a ton by platform.
-** _Ubuntu (and Linux generally)_ : there's a raft of libraries, but the most
-important to grab are: `xorg-dev python-dev ruby ruby-dev` as well as a raft of
-ncurses libraries. Easier way: `sudo apt-get build-dep vim-gnome` (if you're
-using unity)
-** _Mac_ : I think you can get MacVim which should have everything
-** _Windows_ : The \_vim files will be helpful, but note that it has to be under
-`vimfiles`, not `.vim`
-
-1. The easiest way to setup vim _and be sure that you have the features you
-   want_ is to grab the tarball from the vim homepage, and configure it with:[^2]
-
-    ./configure --enable-pythoninterp --enable-rubyinterp --enable-gui --with-features=huge --prefix=$HOME/path/to/directory `
-
-2. Go to your directory where you installed vim and check that you got the right
-   version with:
-
-   ./vim --version
-
-3. If you did it correctly, you'll get a huge amount of input with `+` and `-`.
-   Most important thing is to check that you had the following:
-** `+python`
-** `+ruby` (if you want Command-T)
-** `+xterm-clipboard` (if on Linux w/ X11) or another `+clipboard` entry -- you
-need this to be able to copy/paste from the clipboard.
-
-## Using the dotfiles
-
-### Option 1: Clone the dotfiles
-
-0. Install git. (e.g. `sudo apt-get install git`)
-
-1. Pick a directory, then clone these dotfiles with (it'll automatically add it
-   to a folder called 'dotfiles' unless you specify a different folder after the
-   clone e.g. `git clone https://github.com/jtratner/dotfiles.git
-   mydotfilecollection/jtratner`):
-
-    git clone https://github.com/jtratner/dotfiles.git
-
-### Option 2: Fork the dotfiles yourself
-
-0. Get an account on github, follow their instructions and come back after a
-   bit. Fork the dotfiles yourself. (click on the fork button ;))
-
-1. Initiate a git repository, then add your fork of dotfiles on github as a
-   remote. Finally, download your files.
-
-   mkdir dotfiles
-   cd dotfiles
-   git init
-   git remote add origin git@github.com:_username_/_yourrepository_.git
-   git pull origin master
-
-### Install the dotfiles
-
-2. Go into the dotfiles directory, run `./install.sh` in the command line. BOOM!
-   You are halfway done.
-
-### Symlink the bundle(s) you want to use
-
-3. Change into the \_vim subfolder (`cd _vim`)
-
-4. To activate all the bundles in a folder, you can run the `symlinkdirectory`
-   script.[^5]
-
-   ./symlinkdirectory bundle-available bundle
-
-5. That script created symlinks in the bundle folder to all the plugins in
-   bundle-available. To choose just the plugins you want, add or delete some or
-   use `ln -s` to create new ones[^5]. Bundle-disabled and testing contain
-   additional plugins that you might try out. Or add your own!
-
-## Install rope, nose and ack (optional virtualenv)
-
-0. Rope and nose you can get through `easy_install` or `pip` (I prefer pip)
-
-    pip install rope nose
-
-1. Ack you have to get as a package (e.g. `apt-get install ack` or through
-   homebrew)
-
-2. `virtualenv` - highly useful, you probably want it. (I list it last because
-   the previous items need to be installed system-wide)
-
-    pip install virtualenv virtualenvwrapper
-    virtualenvwrapper.sh
-
-### You have a working setup!
-
-Now you should be able to just run your file and have everything work. Whee!
-
-## IPython
-
-### Installing IPython (+ dependencies)
-
-_Preface_ This ought to work:
-
-    easy_install ipython[zmq,qtconsole,notebook,test]
-
-It never works for me. You _can_ install IPython with `pip`/`easy_install`, you
-just have to get the dependencies first. Before you do, you might also check out
-the [IPython website][IP] and its [guide to installation][IPinstall]
-
-0. Getting python dependencies (you may already have some or all of these) Note
-   that matplotlib, scipy, and numpy are only required if you want to run pylab;
-   however I highly suggest that you get them because they are very useful and
-   pretty darn cool:
-
-    pip install nose tornado pygments pyzmq pexpect distribute matplotlib scipy numpy
-
-1. _Getting Qt._ This can be more or less of an ordeal, depending on your system.
-   Do yourself a favor: _try to find a precompiled binary first_ it will be far
-   easier. Seriously. Otherwise, you'll probably need to get `SIP`, `PyQt` and
-   `Qt` online. (TODO: write instructions for this. For now, Google search is
-   your friend.)
-
-2. _Install IPython_ Okay, actually this is pretty easy now! Yay!
-
-    pip install ipython
-
-3. _Check that it's working_ Run IPython's testing suite. Read the output to
-   make sure you aren't missing any libraries.
-
-    iptest
-
-4. _If it fails_,
-    1. It's okay. Happened to me too.
-    2. Read the output of iptest, see if it gives any info. (google is your
-       friend).
-    3. Check that you have all the dependencies.
-    4. Try uninstalling and reinstalling IPython.
-    5. If it's not fixed by now, try Google, [Stack Overflow][SO] or the [IPython website][IP].
-
-[IP]: http://www.ipython.org
-[IPinstall]: http://ipython.org/ipython-doc/stable/install/install.html
-[SO]: http://www.stackoverflow.com
-
-[^1]: Email me if you'd like a copy
-[^2]: The easiest way is to download and install a precompiled version. On
-Ubuntu, `vim-gnome` has most of what you want.
-[^3]: I set up a different home directory and then symlink it to my local bin,
-that way I can still use the default system editor as needed (say if xwindows
-crashes or something :P)
-[^5]: You can also do this individually with `ln -s`. It's important to use the
-actual paths to the file, or sometimes the links will mess up. For that reason,
-I recommend that, instead of using relative paths, use full paths. E.g. in to
-symlink a file in a subfolder of the \_vim directory: `ln -s $PWD/myfile ../bundle/`
-[^4]: Here's the whole list:
-
-<<<<<<< HEAD
-[1]: there are a ton of dependencies for compiling vim, and they aren't well documented. I used to have an install script but frankly
->>>>>>> 27ba0f9... updating README.md
-=======
-    VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Apr 19 2012 21:01:31)
-    Compiled by root@openwater
-    Huge version with GTK2 GUI.  Features included (+) or not (-):
-    +arabic +autocmd +balloon_eval +browse ++builtin_terms +byte_offset +cindent
-    +clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments
-    +conceal +cryptv +cscope +cursorbind +cursorshape +dialog_con_gui +diff
-    +digraphs +dnd -ebcdic +emacs_tags +eval +ex_extra +extra_search +farsi
-    +file_in_path +find_in_path +float +folding -footer +fork() +gettext
-    -hangul_input +iconv +insert_expand +jumplist +keymap +langmap +libcall
-    +linebreak +lispindent +listcmds +localmap -lua +menu +mksession +modify_fname
-    +mouse +mouseshape +mouse_dec +mouse_gpm -mouse_jsbterm +mouse_netterm
-    -mouse_sysmouse +mouse_xterm +multi_byte +multi_lang -mzscheme +netbeans_intg
-    -osfiletype +path_extra -perl +persistent_undo +postscript +printer +profile
-    +python -python3 +quickfix +reltime +rightleft +ruby +scrollbind +signs
-    +smartindent -sniff +startuptime +statusline -sun_workshop +syntax +tag_binary
-    +tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title
-    +toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo
-    +vreplace +wildignore +wildmenu +windows +writebackup +X11 -xfontset +xim
-    +xsmp_interact +xterm_clipboard -xterm_save
-    system vimrc file: "$VIM/vimrc"
-        user vimrc file: "$HOME/.vimrc"
-        user exrc file: "$HOME/.exrc"
-    system gvimrc file: "$VIM/gvimrc"
-        user gvimrc file: "$HOME/.gvimrc"
-        system menu file: "$VIMRUNTIME/menu.vim"
-    fall-back for $VIM: "/home/jtratner/vimpyru/share/vim"
-    Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/i386-linux-gnu/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/gio-unix-2.0/ -I/usr/include/glib-2.0 -I/usr/lib/i386-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12   -I/usr/local/include  -g -O2 -D_FORTIFY_SOURCE=1     -I/usr/lib/ruby/1.8/i686-linux -DRUBY_VERSION=18
-    Linking: gcc   -L. -Wl,-Bsymbolic-functions -rdynamic -Wl,-export-dynamic  -L/usr/local/lib -o vim   -pthread -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0   -lXt -lncurses -lselinux  -lacl -lgpm -L/usr/lib/python2.7/config -lpython2.7 -lutil -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions   -lruby1.8 -lrt -lm
->>>>>>> 8b3c5c1... adding guide to README
diff --git a/README.rst b/README.rst
new file mode 100644
index 0000000..af30101
--- /dev/null
+++ b/README.rst
@@ -0,0 +1,350 @@
+========================
+the dotfiles of jtratner
+========================
+
+From their start standing on the shoulders of dotfile giants like sontek,
+jtratner&#39;s dotfiles have begun to slowly evolve in their own right.
+
+.. contents::
+
+Using these dotfiles
+====================
+
+tl;dr
+-----
+
+::
+
+    git clone https://github.com/jtratner/dotfiles.git dotfiles
+    cd dotfiles
+    ./install.sh
+    cd _vim
+    ./symlinkdirectory bundle-available bundle
+
+My setup is different than that of sontek and others, because I like to be able
+to individually control bundles on each machine, so I use symlinks to each
+directory. Plus, if you need to remove a bundle, you don't have to go through
+the annoying hassle of removing it from your gitmodules first. But you should do
+what works for you.
+
+Basic Use
+---------
+
+* Pathogen reads from ``_vim/bundle``, so any bundles you want to use should be
+  symlinked into there (you can use the ``symlinkdirectory`` script to do that)
+* You need ``rope``, ``ack``, ``nose`` and ``ipython`` to use all of the features in the
+  bundle.
+* Run ``install.sh`` to set up the dotfiles. It auto backs up your existing
+  dotfiles to .bak. (if you want to remove the new files, you can do so either
+  by using ``rm -i *`` and only accepting symlinks or by using the ``rm_symlink``
+  function from my package [``simpleutils``][su] (vaguely shameless plug!)
+
+My personal touches
+===================
+
+The ``_vimrc`` file is pretty well documented too. You should also go read
+`sontek's description of his dotfiles`_ for more in-depth info on many of
+these plugins.  I'm just going to mention the changes I've made since
+'forking'(ish) sontek's dotfiles.
+
+.. _sontek's description of his dotfiles: http://sontek.net/turning-vim-into-a-modern-python-ide
+
+New bundles
+-----------
+
+* **vim-ipython** - *hands down the best tool to help you code in python* lets
+  you connect to ipython, which is a fabulous suite for
+* **VOom** - simple but very useful vim application. Creates a two-pane outline
+  window that allows you to browse the structure of your files (or
+  classes/functions in python ,etc). For example if you run ``:Voom`` on this
+  file, you'll see a neat directory tree that you can use to navigate the file.
+  Also has a useful in-file grep.
+* **tComment** - handy for easily commenting/uncommenting sections
+* **snipmate** - (updated to garbas' new version + added the snippet repository)
+* **Powerline** - better vim status bar. NOTE: You have to install a patched font
+  to use it. Luckily, there are some included in \_fonts that'll be installed
+  automatically. Yay!
+
+.. _simpleutils : https://github.com/jtratner/simpleutils
+
+reStructuredText/autounderline Functions
+----------------------------------------
+
+* ``:Underline <arg>`` and ``:Title <arg>`` where ``<arg>`` is a character or
+  number underline or 'box':
+
+.. code:: vim
+
+    some vim text
+
+    ":Un 2
+
+    some vim text
+    -------------
+
+    A title
+
+    ":Ti =
+
+    ========
+    A title
+    ========
+
+
+
+New shortcuts
+-------------
+
+* **autolinebreaking for comments/plaintext** (textwrapping and autolinebreak)
+  * <leader>en[#^en], <leader>ec[#ec] <leader>ed[#ed], no autowrap
+* VOom on ``<C-F3>`` (and toggle ``Voom`` with ``<F3>``)
+* ``:EqualLine`` put an equals line just as long as current line of text
+  (from a great post on [Stack Overflow][SO]
+
+.. _en: en - 'Edit Normal' (textwidth 80, autolinebreak)
+.. _ec: ec - 'Edit Comment' (textwidth 72, autolinebreak)
+.. _ed: ed - 'Edit Done' (textwidth 0, autolinebreak off)
+
+
+====================================
+Setting up dotfiles, vim and IPython
+====================================
+
+Getting Vim
+-----------
+
+Prepacked
+"""""""""
+
+Easiest way: ``sudo apt-get build-dep vim-gnome`` (if you're
+using unity)
+
+* **Mac** : I think you can get MacVim_ which should have everything
+* **Windows** : The ``_vim`` files will be helpful, but note that it has to be under
+  ``vimfiles``, not ``.vim``
+
+_MacVim https://github.com/b4winckler/macvim
+
+Compiling Vim (Medium!)
+"""""""""""""""""""""""
+
+0. Handling dependencies - there are a ton and, unfortunately, vim doesn't
+   always tell you that you've managed to get all the ones you want. I used to
+   have an install script[1], but it really varies a ton by platform.
+
+   * **Ubuntu (and Linux generally)**  there's a raft of libraries, but the most
+     important to grab are: ``xorg-dev python-dev ruby ruby-dev`` as well as a
+     raft of ncurses libraries.
+   * **Mac**  Check out homebrew_
+
+.. _homebrew : http://mxcl.github.com/homebrew/
+
+1. The easiest way to setup vim *and be sure
+     that you have the features you want* is to grab the tarball from the vim
+     homepage, and configure it with[2]
+
+.. code:: bash
+
+    ./configure --enable-pythoninterp --enable-rubyinterp --enable-gui --with-features=huge --prefix=$HOME/path/to/directory `
+
+2. Go to your directory where you installed vim and check that you got the right
+   version with
+
+.. code:: bash
+
+    ./vim --version
+
+3. If you did it correctly, you'll get a huge amount of input with ``+`` and ``-``.
+   Most important thing is to check that you had the following:
+
+   * ``+python``
+   * ``+ruby`` (if you want Command-T)
+   * ``+xterm-clipboard`` (if on Linux w/ X11) or another
+   ``+clipboard`` entry -- you need this to be able to copy/paste
+   from the clipboard.
+
+Getting the dotfiles
+--------------------
+
+Option 1: Clone the dotfiles
+""""""""""""""""""""""""""""
+
+0. Install git. (e.g. ``sudo apt-get install git``)
+
+1. Pick a directory, then clone these dotfiles with (it'll automatically add it
+   to a folder called 'dotfiles' unless you specify a different folder after the
+   clone e.g. ``git clone https://github.com/jtratner/dotfiles.git mydotfilecollection/jtratner``):
+
+.. code:: bash
+
+    git clone https://github.com/jtratner/dotfiles.git
+
+Option 2: Fork the dotfiles yourself
+------------------------------------
+
+0. Get an account on github, follow their instructions and come back after a
+   bit. Fork the dotfiles yourself. (click on the fork button ;))
+
+1. Initiate a git repository, then add your fork of dotfiles on github as a
+   remote. Finally, download your files.
+
+.. code:: bash
+
+    mkdir dotfiles
+    cd dotfiles
+    git init
+    git remote add origin git@github.com:*username_/_yourrepository*.git
+    git pull origin master
+
+Install the dotfiles
+--------------------
+
+2. Go into the dotfiles directory, run ``./install.sh`` in the command line. BOOM!
+   You are halfway done.
+
+Symlink the bundle(s) you want to use
+-------------------------------------
+
+3. Change into the ``_vim`` subfolder (``cd *vim``)
+
+4. To activate all the bundles in a folder, you can run the ``symlinkdirectory``
+   script[5]
+
+.. code:: bash
+
+    ./symlinkdirectory bundle-available bundle
+
+5. That script created symlinks in the bundle folder to all the plugins in
+   bundle-available. To choose just the plugins you want, add or delete some or
+   use ``ln -s`` to create new ones[5]. Bundle-disabled and testing contain
+   additional plugins that you might try out. Or add your own!
+
+Python Dependencies
+====================
+
+Install rope, nose and ack (optional virtualenv)
+------------------------------------------------
+
+0. Rope and nose you can get through ``easy_install`` or ``pip`` (I prefer
+   pip)
+
+.. code:: bash
+
+    pip install rope nose
+
+1. Ack you have to get as a package (e.g. ``apt-get install ack`` or through
+   homebrew)
+
+2. ``virtualenv`` - highly useful, you probably want it. (I list it last because
+   the previous items need to be installed system-wide)
+
+.. code:: bash
+
+    pip install virtualenv virtualenvwrapper
+    virtualenvwrapper.sh
+
+You have a working setup!
+-------------------------
+
+Now you should be able to just run your file and have everything work. Whee!
+
+IPython
+=======
+
+Installing IPython (+ dependencies)
+-----------------------------------
+
+*Preface* This ought to work:
+
+.. code:: bash
+
+    easy_install ipython[zmq,qtconsole,notebook,test]
+
+It never works for me. You **can** install IPython with ``pip``/``easy_install``, you
+just have to get the dependencies first. Before you do, you might also check out
+the `IPython website`_ and its `guide to installation`_
+
+0. Getting python dependencies (you may already have some or all of these) Note
+   that matplotlib, scipy, and numpy are only required if you want to run pylab;
+   however I highly suggest that you get them because they are very useful and
+   pretty darn cool
+
+.. code:: bash
+
+    pip install nose tornado pygments pyzmq pexpect distribute matplotlib scipy numpy
+
+1. **Getting Qt** This can be more or less of an ordeal, depending on your system.
+   Do yourself a favor: *try to find a precompiled binary first* it will be far
+   easier. Seriously. Otherwise, you'll probably need to get ``SIP``, ``PyQt`` and
+   ``Qt`` online. (TODO: write instructions for this. For now, Google search is
+   your friend.)
+
+2. **Install IPython** Okay, actually this is pretty easy now! Yay!
+
+.. code:: bash
+
+    pip install ipython
+
+3. _Check that it's working_ Run IPython's testing suite. Read the output to
+   make sure you aren't missing any libraries.
+
+.. code:: bash
+
+    iptest
+
+4. **If it fails,**
+
+   1. It's okay. Happened to me too.
+   2. Read the output of iptest, see if it gives any info. (google is your
+    friend).
+   3. Check that you have all the dependencies.
+   4. Try uninstalling and reinstalling IPython.
+   5. If it's not fixed by now, try Google, `Stack Overflow`_ or the `IPython website`_
+
+.. _IPython website: http://www.ipython.org
+.. _IPinstall: http://ipython.org/ipython-doc/stable/install/install.html
+.. _Stack Overflow: http://www.stackoverflow.com
+
+.. _1: Email me if you'd like a copy
+.. _2: The easiest way is to download and install a precompiled version. On Ubuntu, ``vim-gnome`` has most of what you want.
+.. _3: I set up a different home directory and then symlink it to my local bin,
+that way I can still use the default system editor as needed (say if xwindows
+crashes or something :P)
+.. _5: You can also do this individually with ``ln -s``. It's important to use the
+actual paths to the file, or sometimes the links will mess up. For that reason,
+I recommend that, instead of using relative paths, use full paths. E.g. in to
+symlink a file in a subfolder of the \_vim directory: ``ln -s $PWD/myfile ../bundle/``
+
+
+.. _4: Here's the whole list:
+
+.. code:: bash
+
+    VIM - Vi IMproved 7.3 (2010 Aug 15, compiled Apr 19 2012 21:01:31)
+    Compiled by root@openwater
+    Huge version with GTK2 GUI.  Features included (+) or not (-):
+    +arabic +autocmd +balloon_eval +browse ++builtin_terms +byte_offset +cindent
+    +clientserver +clipboard +cmdline_compl +cmdline_hist +cmdline_info +comments
+    +conceal +cryptv +cscope +cursorbind +cursorshape +dialog_con_gui +diff
+    +digraphs +dnd -ebcdic +emacs_tags +eval +ex_extra +extra_search +farsi
+    +file_in_path +find_in_path +float +folding -footer +fork() +gettext
+    -hangul_input +iconv +insert_expand +jumplist +keymap +langmap +libcall
+    +linebreak +lispindent +listcmds +localmap -lua +menu +mksession +modify_fname
+    +mouse +mouseshape +mouse_dec +mouse_gpm -mouse_jsbterm +mouse_netterm
+    -mouse_sysmouse +mouse_xterm +multi_byte +multi_lang -mzscheme +netbeans_intg
+    -osfiletype +path_extra -perl +persistent_undo +postscript +printer +profile
+    +python -python3 +quickfix +reltime +rightleft +ruby +scrollbind +signs
+    +smartindent -sniff +startuptime +statusline -sun_workshop +syntax +tag_binary
+    +tag_old_static -tag_any_white -tcl +terminfo +termresponse +textobjects +title
+    +toolbar +user_commands +vertsplit +virtualedit +visual +visualextra +viminfo
+    +vreplace +wildignore +wildmenu +windows +writebackup +X11 -xfontset +xim
+    +xsmp_interact +xterm_clipboard -xterm_save
+    system vimrc file: "$VIM/vimrc"
+        user vimrc file: "$HOME/.vimrc"
+        user exrc file: "$HOME/.exrc"
+    system gvimrc file: "$VIM/gvimrc"
+        user gvimrc file: "$HOME/.gvimrc"
+        system menu file: "$VIMRUNTIME/menu.vim"
+    fall-back for $VIM: "/home/jtratner/vimpyru/share/vim"
+    Compilation: gcc -c -I. -Iproto -DHAVE_CONFIG_H -DFEAT_GUI_GTK  -pthread -I/usr/include/gtk-2.0 -I/usr/lib/i386-linux-gnu/gtk-2.0/include -I/usr/include/atk-1.0 -I/usr/include/cairo -I/usr/include/gdk-pixbuf-2.0 -I/usr/include/pango-1.0 -I/usr/include/gio-unix-2.0/ -I/usr/include/glib-2.0 -I/usr/lib/i386-linux-gnu/glib-2.0/include -I/usr/include/pixman-1 -I/usr/include/freetype2 -I/usr/include/libpng12   -I/usr/local/include  -g -O2 -D_FORTIFY_SOURCE=1     -I/usr/lib/ruby/1.8/i686-linux -DRUBY_VERSION=18
+    Linking: gcc   -L. -Wl,-Bsymbolic-functions -rdynamic -Wl,-export-dynamic  -L/usr/local/lib -o vim   -pthread -lgtk-x11-2.0 -lgdk-x11-2.0 -latk-1.0 -lgio-2.0 -lpangoft2-1.0 -lpangocairo-1.0 -lgdk_pixbuf-2.0 -lcairo -lpango-1.0 -lfreetype -lfontconfig -lgobject-2.0 -lgmodule-2.0 -lgthread-2.0 -lrt -lglib-2.0   -lXt -lncurses -lselinux  -lacl -lgpm -L/usr/lib/python2.7/config -lpython2.7 -lutil -Xlinker -export-dynamic -Wl,-O1 -Wl,-Bsymbolic-functions   -lruby1.8 -lrt -lm
diff --git a/SETUP_Debian.rst b/SETUP_Debian.rst
new file mode 100644
index 0000000..c344e6f
--- /dev/null
+++ b/SETUP_Debian.rst
@@ -0,0 +1,68 @@
+====================================
+Debian/Ubuntu-specific install notes
+====================================
+
+.. contents::
+
+Set your vim as default editor
+==============================
+
+Debian uses ``update-alternatives`` to to set the default editor. We want to use
+*our* version of vim, so we need to change this. It's pretty easy, once you know
+what to do. (more in-depth info about `installing update-alternatives`_) Here's
+the command:
+
+.. code:: bash
+
+    sudo update-alternatives --install /usr/bin/editor editor /path/to/your/bin/vim 100
+    # check that we added it appropriately (just press enter to accept)
+    sudo update-alternatives --config editor
+
+    #if you wanted to uninstall this (as opposed to changing the alternative
+    sudo update-alternatives --remove editor /path/to/your/bin/vim
+
+``update-alternatives`` is smart, so it also adds all the other executables
+(gvim, vim, vimdiff, etc) to appropriate ``update-alternatives`` at the same
+time. To briefly explain, here's what each part of the command does:
+
+===========================================================================
+Setting ``update-alternatives``
+---------------------------------------------------------------------------
+
+===========================      ===========================================
+Command                          Meaning
+===========================      ===========================================
+``sudo update-alternatives``     use the debian update-alternatives system
+``--install /usr/bin/editor``    install a new alternative for /usr/bin/editor
+``editor``                       under the group name editor (I have no idea why
+                                 this should be repeated like this)
+``/path/to/your/bin/vim``        symlink this path as the alternative
+``100``                          use this priority (for example, the default
+                                 ``nano`` has priority ``50``) Plus, this will
+                                 actually autoselect vim, which is nice.
+
+``update-alternatives --config`` choose an alternative for
+``editor``                       for ``editor``
+============================================================================
+
+.. _installing update-alternatives: http://www.debian.org/doc/manuals/debian-faq/ch-customizing.en.html
+
+Installing dependencies
+=======================
+
+Vim plugins
+-----------
+
+Ack
+"""
+To get ack-grep and set it to install to ``ack`` (necessary for using Ack):
+
+.. code:: bash
+
+    sudo apt-get install ack-grep
+    sudo dpkg-divert --local --divert /usr/bin/ack --rename --add /usr/bin/ack-grep
+
+IPython
+-------
+
+TODO: fill this in!
diff --git a/SETUP_Ubuntu.rst b/SETUP_Ubuntu.rst
new file mode 100644
index 0000000..c344e6f
--- /dev/null
+++ b/SETUP_Ubuntu.rst
@@ -0,0 +1,68 @@
+====================================
+Debian/Ubuntu-specific install notes
+====================================
+
+.. contents::
+
+Set your vim as default editor
+==============================
+
+Debian uses ``update-alternatives`` to to set the default editor. We want to use
+*our* version of vim, so we need to change this. It's pretty easy, once you know
+what to do. (more in-depth info about `installing update-alternatives`_) Here's
+the command:
+
+.. code:: bash
+
+    sudo update-alternatives --install /usr/bin/editor editor /path/to/your/bin/vim 100
+    # check that we added it appropriately (just press enter to accept)
+    sudo update-alternatives --config editor
+
+    #if you wanted to uninstall this (as opposed to changing the alternative
+    sudo update-alternatives --remove editor /path/to/your/bin/vim
+
+``update-alternatives`` is smart, so it also adds all the other executables
+(gvim, vim, vimdiff, etc) to appropriate ``update-alternatives`` at the same
+time. To briefly explain, here's what each part of the command does:
+
+===========================================================================
+Setting ``update-alternatives``
+---------------------------------------------------------------------------
+
+===========================      ===========================================
+Command                          Meaning
+===========================      ===========================================
+``sudo update-alternatives``     use the debian update-alternatives system
+``--install /usr/bin/editor``    install a new alternative for /usr/bin/editor
+``editor``                       under the group name editor (I have no idea why
+                                 this should be repeated like this)
+``/path/to/your/bin/vim``        symlink this path as the alternative
+``100``                          use this priority (for example, the default
+                                 ``nano`` has priority ``50``) Plus, this will
+                                 actually autoselect vim, which is nice.
+
+``update-alternatives --config`` choose an alternative for
+``editor``                       for ``editor``
+============================================================================
+
+.. _installing update-alternatives: http://www.debian.org/doc/manuals/debian-faq/ch-customizing.en.html
+
+Installing dependencies
+=======================
+
+Vim plugins
+-----------
+
+Ack
+"""
+To get ack-grep and set it to install to ``ack`` (necessary for using Ack):
+
+.. code:: bash
+
+    sudo apt-get install ack-grep
+    sudo dpkg-divert --local --divert /usr/bin/ack --rename --add /usr/bin/ack-grep
+
+IPython
+-------
+
+TODO: fill this in!
diff --git a/_bashrc~ b/_bashrc~
deleted file mode 100644
index 337f7b6..0000000
--- a/_bashrc~
+++ /dev/null
@@ -1,103 +0,0 @@
-# ~/.bashrc: executed by bash(1) for non-login shells.
-# see /usr/share/doc/bash/examples/startup-files (in the package bash-doc)
-# for examples
-
-# If not running interactively, don't do anything
-[ -z "$PS1" ] && return
-
-# don't put duplicate lines in the history. See bash(1) for more options
-# ... or force ignoredups and ignorespace
-HISTCONTROL=ignoredups:ignorespace
-
-# append to the history file, don't overwrite it
-shopt -s histappend
-
-# for setting history length see HISTSIZE and HISTFILESIZE in bash(1)
-HISTSIZE=1000
-HISTFILESIZE=2000
-
-# check the window size after each command and, if necessary,
-# update the values of LINES and COLUMNS.
-shopt -s checkwinsize
-
-# make less more friendly for non-text input files, see lesspipe(1)
-[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"
-
-# set variable identifying the chroot you work in (used in the prompt below)
-if [ -z "$debian_chroot" ] && [ -r /etc/debian_chroot ]; then
-    debian_chroot=$(cat /etc/debian_chroot)
-fi
-
-# set a fancy prompt (non-color, unless we know we "want" color)
-case "$TERM" in
-    xterm-color) color_prompt=yes;;
-esac
-
-# uncomment for a colored prompt, if the terminal has the capability; turned
-# off by default to not distract the user: the focus in a terminal window
-# should be on the output of commands, not on the prompt
-#force_color_prompt=yes
-
-if [ -n "$force_color_prompt" ]; then
-    if [ -x /usr/bin/tput ] && tput setaf 1 >&/dev/null; then
-	# We have color support; assume it's compliant with Ecma-48
-	# (ISO/IEC-6429). (Lack of such support is extremely rare, and such
-	# a case would tend to support setf rather than setaf.)
-	color_prompt=yes
-    else
-	color_prompt=
-    fi
-fi
-
-if [ "$color_prompt" = yes ]; then
-    PS1='${debian_chroot:+($debian_chroot)}\[\033[01;32m\]\u@\h\[\033[00m\]:\[\033[01;34m\]\w\[\033[00m\]\$ '
-else
-    PS1='${debian_chroot:+($debian_chroot)}\u@\h:\w\$ '
-fi
-unset color_prompt force_color_prompt
-
-# If this is an xterm set the title to user@host:dir
-case "$TERM" in
-xterm*|rxvt*)
-    PS1="\[\e]0;${debian_chroot:+($debian_chroot)}\u@\h: \w\a\]$PS1"
-    ;;
-*)
-    ;;
-esac
-
-# enable color support of ls and also add handy aliases
-if [ -x /usr/bin/dircolors ]; then
-    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
-    alias ls='ls --color=auto'
-    #alias dir='dir --color=auto'
-    #alias vdir='vdir --color=auto'
-
-    alias grep='grep --color=auto'
-    alias fgrep='fgrep --color=auto'
-    alias egrep='egrep --color=auto'
-fi
-
-# some more ls aliases
-alias ll='ls -alF'
-alias la='ls -A'
-alias l='ls -CF'
-
-# Add an "alert" alias for long running commands.  Use like so:
-#   sleep 10; alert
-alias alert='notify-send --urgency=low -i "$([ $? = 0 ] && echo terminal || echo error)" "$(history|tail -n1|sed -e '\''s/^\s*[0-9]\+\s*//;s/[;&|]\s*alert$//'\'')"'
-
-# Alias definitions.
-# You may want to put all your additions into a separate file like
-# ~/.bash_aliases, instead of adding them here directly.
-# See /usr/share/doc/bash-doc/examples in the bash-doc package.
-
-if [ -f ~/.bash_aliases ]; then
-    . ~/.bash_aliases
-fi
-
-# enable programmable completion features (you don't need to enable
-# this, if it's already enabled in /etc/bash.bashrc and /etc/profile
-# sources /etc/bash.bashrc).
-if [ -f /etc/bash_completion ] && ! shopt -oq posix; then
-    . /etc/bash_completion
-fi
diff --git a/_vim/autoload/vimrc_modules/README.rst b/_vim/autoload/vimrc_modules/README.rst
new file mode 100644
index 0000000..d11022a
--- /dev/null
+++ b/_vim/autoload/vimrc_modules/README.rst
@@ -0,0 +1,21 @@
+=============
+vimrc-modules
+=============
+
+Making vimrc easier to edit
+===========================
+
+I was inspired to split up my vimrc and (soon) bashrc after reading Zach
+Holman's great article on dotfiles `"Dotfiles Are Meant To Be Forked"`_. There's
+no point in stuffing everything into one file, when you can split it up into
+parts and be able to more easily read and edit your dotfiles. This directory
+contains a list of my dotfiles (and eventually there will be a corresponding
+helptag listing all the custom commands in the dotfiles).
+
+.. _Dotfiles Are Meant To Be Forked : http://zachholman.com/2010/08/dotfiles-are-meant-to-be-forked/
+
+.. contents::
+
+Plugin Modules
+==============
+
